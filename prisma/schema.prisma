// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}


enum Role {
  USER 
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  orders        Order[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id String @id @default(cuid())
  name String 
  description String?
  brand String?
  size String?
  color String?
  slug String? @unique
  stock Int? 
  onSale Boolean?
  newPrice Int?
  oldPrice Int?
  discount Int?
  price Int? 
  rating Int?  
  filePath String?   // To store multiple images URLs
  imagePath String?  // To store a single image URL(Could be the main image)
  category String?
  quantity Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders Order[]

  downloadVerifications  DownloadVerification[]
  discountCodes          DiscountCode[]
}

model Order {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Restrict) 
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  quantity Int
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discountCodeId String?
  discountCode   DiscountCode? @relation(fields: [discountCodeId], references: [id], onDelete: Restrict)
}


model DownloadVerification {
  id        String   @id @default(cuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model DiscountCode {
  id             String           @id @default(cuid())
  code           String           @unique
  discountAmount Int
  discountType   DiscountCodeType
  uses           Int              @default(0)
  isActive       Boolean          @default(true)
  allProducts    Boolean          @default(false)
  createdAt      DateTime         @default(now())
  limit          Int?
  expiresAt      DateTime?

  products Product[]
  orders   Order[]
}

enum DiscountCodeType {
  PERCENTAGE
  FIXED
}